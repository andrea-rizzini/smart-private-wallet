// SPDX-License-Identifier: MIT

pragma solidity ^0.8.9;

library Pairing {
    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;

    struct G1Point {
        uint256 X;
        uint256 Y;
    }

    // Encoding of field elements is: X[0] * z + X[1]
    struct G2Point {
        uint256[2] X;
        uint256[2] Y;
    }

    /*
     * @return The negation of p, i.e. p.plus(p.negate()) should be zero
     */
    function negate(G1Point memory p) internal pure returns (G1Point memory) {
        // The prime q in the base field F_q for G1
        if (p.X == 0 && p.Y == 0) {
            return G1Point(0, 0);
        } else {
            return G1Point(p.X, PRIME_Q - (p.Y % PRIME_Q));
        }
    }

    /*
     * @return r the sum of two points of G1
     */
    function plus(
        G1Point memory p1,
        G1Point memory p2
    ) internal view returns (G1Point memory r) {
        uint256[4] memory input = [
            p1.X, p1.Y,
            p2.X, p2.Y
        ];
        bool success;

        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }

        require(success, "pairing-add-failed");
    }

    /*
     * @return r the product of a point on G1 and a scalar, i.e.
     *         p == p.scalarMul(1) and p.plus(p) == p.scalarMul(2) for all
     *         points p.
     */
    function scalarMul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {
        uint256[3] memory input = [p.X, p.Y, s];
        bool success;

        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }

        require(success, "pairing-mul-failed");
    }

    /* @return The result of computing the pairing check
     *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1
     *         For example,
     *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.
     */
    function pairing(
        G1Point memory a1,
        G2Point memory a2,
        G1Point memory b1,
        G2Point memory b2,
        G1Point memory c1,
        G2Point memory c2,
        G1Point memory d1,
        G2Point memory d2
    ) internal view returns (bool) {
        uint256[24] memory input = [
            a1.X, a1.Y, a2.X[0], a2.X[1], a2.Y[0], a2.Y[1],
            b1.X, b1.Y, b2.X[0], b2.X[1], b2.Y[0], b2.Y[1],
            c1.X, c1.Y, c2.X[0], c2.X[1], c2.Y[0], c2.Y[1],
            d1.X, d1.Y, d2.X[0], d2.X[1], d2.Y[0], d2.Y[1]
        ];
        uint256[1] memory out;
        bool success;

        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 8, input, mul(24, 0x20), out, 0x20)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }

        require(success, "pairing-opcode-failed");
        return out[0] != 0;
    }
}

contract Verifier16 {
    uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;
    using Pairing for *;

    struct VerifyingKey {
        Pairing.G1Point alfa1;
        Pairing.G2Point beta2;
        Pairing.G2Point gamma2;
        Pairing.G2Point delta2;
        Pairing.G1Point[21] IC;
    }

    function verifyingKey() internal pure returns (VerifyingKey memory vk) {
          vk.alfa1 = Pairing.G1Point(20491192805390485299153009773594534940189261866228447918068658471970481763042, 9383485363053290200918347156157836566562967994039712273449902621266178545958);
          vk.beta2 = Pairing.G2Point([4252822878758300859123897981450591353533073413197771768651442665752259397132, 6375614351688725206403948262868962793625744043794305715222011528459656738731], [21847035105528745403288232691147584728191162732299865338377159692350059136679, 10505242626370262277552901082094356697409835680220590971873171140371331206856]);
          vk.gamma2 = Pairing.G2Point([11559732032986387107991004021392285783925812861821192530917403151452391805634, 10857046999023057135944570762232829481370756359578518086990519993285655852781], [4082367875863433681332203403145435568316851327593401208105741076214120093531, 8495653923123431417604973247489272438418190587263600148770280649306958101930]);
          vk.delta2 = Pairing.G2Point([9296712907247629833481857503579254319173117482102307483043668937877426493755, 12343235579001895428933141587644135894841838681036036798078505796185679993776], [5534890001586931808797281357966501029650217614811722994748761889678935621544, 18670771140016232592332591762508228332058673752617623295661565378171844509072]);
          
          vk.IC[0] = Pairing.G1Point(14892855322590116993653981859047191197111134087347846989604753353726401121001, 9628758255781885014804991981059959635598875011887275232060264796442298149005);
          vk.IC[1] = Pairing.G1Point(6410345327228851780123923867856556418955932244916849178182792566930244581838, 18826111561492970896893478630433297457737065110039983904832891532230445331300);
          vk.IC[2] = Pairing.G1Point(3078484550990663489317582227675531309062237903107655006146648740743109638418, 11232848748063173001903801860173707866265933507362890468806048375023512834274);
          vk.IC[3] = Pairing.G1Point(13705717204097204290256289974237793687457313755633319653489753615802894446008, 6572814445496528196282300798477024876229601883098752415897136446483910378099);
          vk.IC[4] = Pairing.G1Point(10024066214256135794809481692594856472623566234444206440557955208644452702146, 21698935093973924324984235864692857598706921935230879106100436511254684713583);
          vk.IC[5] = Pairing.G1Point(7270760922766392498047246887584568134092425782843613728071262178823057553809, 7131281765545094889586665918384475516844357513197563485628536703338586671029);
          vk.IC[6] = Pairing.G1Point(20711056340460984334331737750084278227325282805642584290148961707415037506214, 11700627443571143688430836118179911142049073916922481936669463097576490260829);
          vk.IC[7] = Pairing.G1Point(12575329313382302963105908031937710273292533888279107561046287489455504816440, 18853308820070558127382137686378810495155415501138625361673338689460287595331);
          vk.IC[8] = Pairing.G1Point(13960415739494979618077182672768466130517830501224130589305681550111927353992, 7655403866561516501550549505503708865813064833468508208434879167735257501877);
          vk.IC[9] = Pairing.G1Point(1042900383937468249012088465751805541334879340676784353606860123299278328888, 20535667931536192539786914055352066232774034747196622138678940859321415256497);
          vk.IC[10] = Pairing.G1Point(6199726671381197451009663534886037454140242769179356336849880627520496791535, 4510095643709455598167444781114897132470718305676380096513401410226019848916);
          vk.IC[11] = Pairing.G1Point(19826328754710557114163048872011378162975427464878418415399002337014005368068, 7593016487984892801748072366655502432715479303571686987088671921755337780512);
          vk.IC[12] = Pairing.G1Point(12623496762839278541441221879777888114007246212470029215675639768589439890930, 6176588449020222909217379528112294508642597072279388942226345522574355101737);
          vk.IC[13] = Pairing.G1Point(8598442502933501747230839513336311013977387671362629472976949142185470174065, 14529362637370324228518278289623701166660661998201254383111035401440818953965);
          vk.IC[14] = Pairing.G1Point(18021780549178678301858183670642698680974110587989164561179080489374000413938, 15329235489715024523317640618642218838925093508644227036614157031430734349622);
          vk.IC[15] = Pairing.G1Point(8653603282656366801495384169627056537834262381121031223168641035179545158005, 7902569873638524200406052349820734798585637213068717163590358897071762043046);
          vk.IC[16] = Pairing.G1Point(4084344846025312284271921197839067014227411699520698435978539864095688094196, 4048069837082334903499736623437797664456149455932021102964929014430469715460);
          vk.IC[17] = Pairing.G1Point(3845743237625896996433256144968588152557399423834431263940446557214373743442, 2618904013295710663249006310520180691619582158583030408337092407186405979492);
          vk.IC[18] = Pairing.G1Point(10692345958172930620428526926987448927602102468446487730968527073187833792008, 19389314317771494206650963548136864982292316730085735348318542724067842035369);
          vk.IC[19] = Pairing.G1Point(14193226881378680784510963683564405917583753289739347531661786582561380219098, 19335680033880768377378550632706055744846310180985367104442435812309159108634);
          vk.IC[20] = Pairing.G1Point(8159925859232774498428276672239419359659575378693004202182457133122927391047, 6019708464358705377655734735369313896934669346591487184377877025808077686572);
    }

    /*
     * @returns Whether the proof is valid given the hardcoded verifying key
     *          above and the public inputs
     */
    function verifyProof(
        bytes memory proof,
        uint256[20] memory input
    ) public view returns (bool) {
        uint256[8] memory p = abi.decode(proof, (uint256[8]));
        for (uint8 i = 0; i < p.length; i++) {
            // Make sure that each element in the proof is less than the prime q
            require(p[i] < PRIME_Q, "verifier-proof-element-gte-prime-q");
        }
        Pairing.G1Point memory proofA = Pairing.G1Point(p[0], p[1]);
        Pairing.G2Point memory proofB = Pairing.G2Point([p[2], p[3]], [p[4], p[5]]);
        Pairing.G1Point memory proofC = Pairing.G1Point(p[6], p[7]);

        VerifyingKey memory vk = verifyingKey();
        // Compute the linear combination vkX
        Pairing.G1Point memory vkX = vk.IC[0];
        for (uint256 i = 0; i < input.length; i++) {
            // Make sure that every input is less than the snark scalar field
            require(input[i] < SNARK_SCALAR_FIELD, "verifier-input-gte-snark-scalar-field");
            vkX = Pairing.plus(vkX, Pairing.scalarMul(vk.IC[i + 1], input[i]));
        }

        return Pairing.pairing(
            Pairing.negate(proofA),
            proofB,
            vk.alfa1,
            vk.beta2,
            vkX,
            vk.gamma2,
            proofC,
            vk.delta2
        );
    }
}

