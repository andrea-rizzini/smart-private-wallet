// SPDX-License-Identifier: MIT

pragma solidity ^0.8.12;

library Pairing {
    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;

    struct G1Point {
        uint256 X;
        uint256 Y;
    }

    // Encoding of field elements is: X[0] * z + X[1]
    struct G2Point {
        uint256[2] X;
        uint256[2] Y;
    }

    /*
     * @return The negation of p, i.e. p.plus(p.negate()) should be zero
     */
    function negate(G1Point memory p) internal pure returns (G1Point memory) {
        // The prime q in the base field F_q for G1
        if (p.X == 0 && p.Y == 0) {
            return G1Point(0, 0);
        } else {
            return G1Point(p.X, PRIME_Q - (p.Y % PRIME_Q));
        }
    }

    /*
     * @return r the sum of two points of G1
     */
    function plus(
        G1Point memory p1,
        G1Point memory p2
    ) internal view returns (G1Point memory r) {
        uint256[4] memory input = [
            p1.X, p1.Y,
            p2.X, p2.Y
        ];
        bool success;

        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }

        require(success, "pairing-add-failed");
    }

    /*
     * @return r the product of a point on G1 and a scalar, i.e.
     *         p == p.scalarMul(1) and p.plus(p) == p.scalarMul(2) for all
     *         points p.
     */
    function scalarMul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {
        uint256[3] memory input = [p.X, p.Y, s];
        bool success;

        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }

        require(success, "pairing-mul-failed");
    }

    /* @return The result of computing the pairing check
     *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1
     *         For example,
     *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.
     */
    function pairing(
        G1Point memory a1,
        G2Point memory a2,
        G1Point memory b1,
        G2Point memory b2,
        G1Point memory c1,
        G2Point memory c2,
        G1Point memory d1,
        G2Point memory d2
    ) internal view returns (bool) {
        uint256[24] memory input = [
            a1.X, a1.Y, a2.X[0], a2.X[1], a2.Y[0], a2.Y[1],
            b1.X, b1.Y, b2.X[0], b2.X[1], b2.Y[0], b2.Y[1],
            c1.X, c1.Y, c2.X[0], c2.X[1], c2.Y[0], c2.Y[1],
            d1.X, d1.Y, d2.X[0], d2.X[1], d2.Y[0], d2.Y[1]
        ];
        uint256[1] memory out;
        bool success;

        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 8, input, mul(24, 0x20), out, 0x20)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }

        require(success, "pairing-opcode-failed");
        return out[0] != 0;
    }
}

contract Verifier16 {
    uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;
    using Pairing for *;

    struct VerifyingKey {
        Pairing.G1Point alfa1;
        Pairing.G2Point beta2;
        Pairing.G2Point gamma2;
        Pairing.G2Point delta2;
        Pairing.G1Point[22] IC;
    }

    function verifyingKey() internal pure returns (VerifyingKey memory vk) {
          vk.alfa1 = Pairing.G1Point(20491192805390485299153009773594534940189261866228447918068658471970481763042, 9383485363053290200918347156157836566562967994039712273449902621266178545958);
          vk.beta2 = Pairing.G2Point([4252822878758300859123897981450591353533073413197771768651442665752259397132, 6375614351688725206403948262868962793625744043794305715222011528459656738731], [21847035105528745403288232691147584728191162732299865338377159692350059136679, 10505242626370262277552901082094356697409835680220590971873171140371331206856]);
          vk.gamma2 = Pairing.G2Point([11559732032986387107991004021392285783925812861821192530917403151452391805634, 10857046999023057135944570762232829481370756359578518086990519993285655852781], [4082367875863433681332203403145435568316851327593401208105741076214120093531, 8495653923123431417604973247489272438418190587263600148770280649306958101930]);
          vk.delta2 = Pairing.G2Point([15816529630764383195116161787212861095188856746490409053747991055825530284299, 19586298421379728493833206522248064497104678165668628755118220755888890065020], [17804181099511290736749674808329698086744486024564014457415846534589941073000, 14756216948940375557454925648654612568755681731756455953288024730945146377718]);
          
          vk.IC[0] = Pairing.G1Point(6363769317691654188655381921519701405332682131565147487451268547623383778018, 9524437906155698689571977025028594590950105730022521760841203363073612027272);
          vk.IC[1] = Pairing.G1Point(12185991547042744306878625434583844910099901258353111496715641554076054766702, 12583076838404893459300613732174100829247631295956797856921427739013285611334);
          vk.IC[2] = Pairing.G1Point(3193052863147503305803822216968822056370320690908128060910216553032982127057, 1757148151606756075240245161150745062895960924509882087537227760376616442263);
          vk.IC[3] = Pairing.G1Point(20211324898659253963224950470838520998214550883097681084020925045112711320665, 17938918799873553189472090913178818078978149582067021201650216646566155052203);
          vk.IC[4] = Pairing.G1Point(5459360433899004519363408621514801184800055943151474533998543595366654616476, 4392738793535558452664856857522593058117302100163911108023342681052248165469);
          vk.IC[5] = Pairing.G1Point(1975843820936756595457361828797099392108046171609914435389320647691662403064, 6087624298966780067125132044004756769777831754963993386564438466980856685617);
          vk.IC[6] = Pairing.G1Point(6656524677199674215902902910002218491856332724690747474400048016126558401520, 10837217250978103723281817138337021827931220830169436195340161411790729101552);
          vk.IC[7] = Pairing.G1Point(12147385050282642362503214058039851316949807910067921531191162709165455697609, 17188728296379899146097580521768449813542302357248613111560858892942818289492);
          vk.IC[8] = Pairing.G1Point(3991578743154867924327590611663573125998514497778967806880509251827643789601, 11410732118229564978128466304777792322050995274481071200276511396699316201010);
          vk.IC[9] = Pairing.G1Point(11397319899190389525258742726772169514910630645932353570098603407034986325832, 19485430482034636308997050976308165714294337973526932137162858654847465759062);
          vk.IC[10] = Pairing.G1Point(7805041342902603437764283545410972368232881133946696689697693834624629739473, 7207356208366631943333475088746355858081907111729593934397415927813114780800);
          vk.IC[11] = Pairing.G1Point(8030665380781200018348373454742132120412874378844735479234522834383208382291, 6703725208010006685811067280350470111953736236169944664947355837777032650703);
          vk.IC[12] = Pairing.G1Point(3442501515085030013357741416433847726022805026174900749059017209181355415683, 1798863805035447062835346634566174720047371147236176191280204945470198930473);
          vk.IC[13] = Pairing.G1Point(10223395917495341190145867334728602104529743207719401803631827799147570145394, 20847087782902595347428499002619864644624521440143292299241990575578260342092);
          vk.IC[14] = Pairing.G1Point(9560405547576762852073555035725316736287701476590680651972577509952076880108, 9994247329956332141479954580276090824323377343129807265579193576591664747958);
          vk.IC[15] = Pairing.G1Point(2025189152960854316882756921978909953155710281461969354759458618013088825993, 14887538528128733554036303619771277955209829517646732994291135045614162197995);
          vk.IC[16] = Pairing.G1Point(402147461457319583908007532655426544179852385421666549335732483812009534245, 14556186995949341944280178374678929112329695046764133488103589647705957272800);
          vk.IC[17] = Pairing.G1Point(2065183342437378329940705532427667343524037194490088121604031020144862297620, 16371265499237540100519967762165876476451510984098127760460608553328805771153);
          vk.IC[18] = Pairing.G1Point(5148952671762619134285358998902739713516681497771878993648941730852919811631, 3899540014246570235972751327621225250727663136996642581369412887639523365881);
          vk.IC[19] = Pairing.G1Point(997394142328549962870538770258517329426734283803055157568777014624631265503, 13125759722597639221857432129172563029905208830817503864335428284160069353997);
          vk.IC[20] = Pairing.G1Point(15677443440384309947893697360649998659991456520246903402716760095221778714584, 8122929822362171388886832917896347091369575138635034285097191901825260041701);
          vk.IC[21] = Pairing.G1Point(6099136641117678857527761670651806534911203449431060187834370721854960762220, 12246825704696752433725732349349868957339729605802239357952211346900902471237);
    }

    /*
     * @returns Whether the proof is valid given the hardcoded verifying key
     *          above and the public inputs
     */
    function verifyProof(
        bytes memory proof,
        uint256[21] memory input
    ) public view returns (bool) {
        uint256[8] memory p = abi.decode(proof, (uint256[8]));
        for (uint8 i = 0; i < p.length; i++) {
            // Make sure that each element in the proof is less than the prime q
            require(p[i] < PRIME_Q, "verifier-proof-element-gte-prime-q");
        }
        Pairing.G1Point memory proofA = Pairing.G1Point(p[0], p[1]);
        Pairing.G2Point memory proofB = Pairing.G2Point([p[2], p[3]], [p[4], p[5]]);
        Pairing.G1Point memory proofC = Pairing.G1Point(p[6], p[7]);

        VerifyingKey memory vk = verifyingKey();
        // Compute the linear combination vkX
        Pairing.G1Point memory vkX = vk.IC[0];
        for (uint256 i = 0; i < input.length; i++) {
            // Make sure that every input is less than the snark scalar field
            require(input[i] < SNARK_SCALAR_FIELD, "verifier-input-gte-snark-scalar-field");
            vkX = Pairing.plus(vkX, Pairing.scalarMul(vk.IC[i + 1], input[i]));
        }

        return Pairing.pairing(
            Pairing.negate(proofA),
            proofB,
            vk.alfa1,
            vk.beta2,
            vkX,
            vk.gamma2,
            proofC,
            vk.delta2
        );
    }
}

